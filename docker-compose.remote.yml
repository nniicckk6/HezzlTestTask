# Docker Compose с удалёнными образами из GHCR для быстрого запуска без исходников
version: '3.8'
services:
  app:
    image: ghcr.io/nniicckk6/hezzltesttask:${TAG:-latest}  # образ API из GitHub Packages
    container_name: api_app_remote
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=appuser
      - DB_PASSWORD=secret
      - DB_NAME=appdb
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - NATS_URL=nats://nats:4222
      - NATS_SUBJECT=goods
      - REDIS_ADDR=redis:6379
      - REDIS_TTL=1m
      - CLICKHOUSE_USER=migrations_user
      - CLICKHOUSE_PASSWORD=migrator_pass
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 3s

  consumer:
    image: ghcr.io/nniicckk6/hezzltesttask-consumer:${TAG:-latest}  # образ Consumer из GitHub Packages
    container_name: consumer_remote
    environment:
      - NATS_URL=nats://nats:4222
      - NATS_SUBJECT=goods
      - CLICKHOUSE_DSN=tcp://clickhouse:9000?username=migrations_user&password=migrator_pass&database=appdb&debug=false
      - BATCH_SIZE=10
    depends_on:
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:8081/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 3s

  postgres:
    image: postgres:17-alpine
    container_name: postgres_remote
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: appdb
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 3s

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse_remote
    environment:
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
    ports:
      - "9000:9000"
      - "8123:8123"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "clickhouse-client", "--host=127.0.0.1", "--query=SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 3s

  nats:
    image: nats:2.11.4-alpine3.22
    container_name: nats_remote
    command: ["-m","8222"]
    ports:
      - "4222:4222"
      - "8222:8222"
    healthcheck:
      test: ["CMD-SHELL","wget -qO- http://localhost:8222/healthz || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 3s

  redis:
    image: redis:latest
    container_name: redis_remote
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 3s

volumes:
  pgdata:
  clickhouse_data:

networks:
  default:
    name: hezzl_network_remote

